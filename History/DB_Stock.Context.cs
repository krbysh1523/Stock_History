//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace History
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StockEntity : DbContext
    {
        public StockEntity()
            : base("name=StockEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<watch_list> watch_list { get; set; }
        public virtual DbSet<lookup> lookups { get; set; }
        public virtual DbSet<daily_source> daily_source { get; set; }
        public virtual DbSet<earning> earnings { get; set; }
        public virtual DbSet<income> incomes { get; set; }
        public virtual DbSet<watch_list_v1> watch_list_v1 { get; set; }
        public virtual DbSet<daily_history> daily_history { get; set; }
        public virtual DbSet<daily_strong> daily_strong { get; set; }
        public virtual DbSet<daily_close> daily_close { get; set; }
    
        public virtual int process_ema()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("process_ema");
        }
    
        public virtual int process_rsi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("process_rsi");
        }
    
        public virtual int process_macd()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("process_macd");
        }
    
        public virtual int process_volume(string symbol)
        {
            var symbolParameter = symbol != null ?
                new ObjectParameter("symbol", symbol) :
                new ObjectParameter("symbol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("process_volume", symbolParameter);
        }
    
        public virtual int update_daily_v1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_daily_v1");
        }
    
        public virtual int process_change(string symbol)
        {
            var symbolParameter = symbol != null ?
                new ObjectParameter("symbol", symbol) :
                new ObjectParameter("symbol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("process_change", symbolParameter);
        }
    
        public virtual int process_history(string symbol)
        {
            var symbolParameter = symbol != null ?
                new ObjectParameter("symbol", symbol) :
                new ObjectParameter("symbol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("process_history", symbolParameter);
        }
    
        public virtual int process_analysis(string symbol)
        {
            var symbolParameter = symbol != null ?
                new ObjectParameter("symbol", symbol) :
                new ObjectParameter("symbol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("process_analysis", symbolParameter);
        }
    
        public virtual int process_sma_detail(string symbol, Nullable<System.DateTime> last_ran, string table_name, string col_name, Nullable<int> days)
        {
            var symbolParameter = symbol != null ?
                new ObjectParameter("symbol", symbol) :
                new ObjectParameter("symbol", typeof(string));
    
            var last_ranParameter = last_ran.HasValue ?
                new ObjectParameter("last_ran", last_ran) :
                new ObjectParameter("last_ran", typeof(System.DateTime));
    
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var col_nameParameter = col_name != null ?
                new ObjectParameter("col_name", col_name) :
                new ObjectParameter("col_name", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("process_sma_detail", symbolParameter, last_ranParameter, table_nameParameter, col_nameParameter, daysParameter);
        }
    }
}
